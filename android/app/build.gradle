def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: "com.google.protobuf"
//apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.rss.rssclient"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 29
//        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        compileSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    // Protobuf
    // https://mvnrepository.com/artifact/com.google.api.grpc/proto-google-common-protos
    implementation group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '2.11.0'
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '4.0.0-rc-2'

    // HTTP Requests
    // https://mvnrepository.com/artifact/com.android.volley/volley
    implementation group: 'com.android.volley', name: 'volley', version: '1.2.1'

    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
//                 remove java
                    option "lite"
                }
//                python {
//                }
            }
//            task.plugins {
//                javalite { }
//            }
            task.generateDescriptorSet = true

            // Allows to override the default for the descriptor set location
//            task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${task.sourceSet.name}.dsc"

            // If true, the descriptor set will contain line number information
            // and comments. Default is false.
            task.descriptorSetOptions.includeSourceInfo = true

            // If true, the descriptor set will contain all transitive imports and
            // is therefore self-contained. Default is false.
            task.descriptorSetOptions.includeImports = true
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}
