name: build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
#     branches: [ "main","dev" ]
    tags:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  flutter-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Repository
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'
      - name: Update API_KEY from Secrets
        run: echo API_KEY=${{ secrets.RSS_API_KEY }} > ./local.properties
      - uses: subosito/flutter-action@v2.8.0
        with:
          channel: 'stable'
          architecture: x64
          cache: true
      - run: flutter pub get
      - run: flutter test

  android-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    name: "Build Flutter Android"
    needs: [flutter-test]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Repository
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3.3.0
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
          cache: 'gradle'
      - name: Download Android keystore
          id: android_keystore
          uses: timheuer/base64-to-file@v1.0.3
          with:
            fileName: upload-keystore.jks
            encodedString: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
            - name: Create key.properties
              run: |
                echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
                echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
                echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
                echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
      - uses: subosito/flutter-action@v2.8.0
        with:
          channel: 'stable'
          cache: true
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build apk --release
#       - run: flutter build appbundle
      - run: |
              ls build/app/outputs/flutter-apk/ -al
        shell: bash
      - uses: actions/upload-artifact@v3.1.2
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/

  # ios-build:
  #   name: "Build Flutter (iOS)"
  #   needs: [flutter-test]
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: subosito/flutter-action@v2
  #     with:
  #       channel: 'stable'
  #       architecture: x64
  #   - run: flutter pub get
  #   - run: flutter clean
  #   - run: flutter build ios --release --no-codesign
#     - uses: actions/upload-artifact@master
#       with:
#         name: RSD
#         path: build/app/outputs/bundle/release/*.aab

  release-assets:
    runs-on: ubuntu-latest
    needs: [android-build]
    steps:
      - name: "Download Artificat"
        uses: actions/download-artifact@v2.1.1
        with:
          name: app-release
#           path: build/app/outputs/flutter-apk/*.apk
      - name: Check Artifact download
        run: ls -R

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
#           tag_name: ${{ github.ref }}
          artifact: app-release.apk
          release_name: Release RSS Alpha
          generateReleaseNotes: true
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app-release.apk
          asset_name: RSS-Client.apk
          asset_content_type: application/vnd.android.package-archive
