# This is a basic workflow to help you get started with Actions

name: dart-src-generator

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "feature/*","task/*","dev" ]
  #   pull_request:
  #     branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout Repository
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3

      # Setup CMake
      - name: Get Cmake
        uses: lukka/get-cmake@arm64-win-linux

      # Setup Dart
      - name: Setup Dart SDK
        uses: dart-lang/setup-dart@v1.4
        
      - name: Installs Flutter
        uses: britannio/action-install-flutter@v1.1

      # Resource: https://lukasjoswiak.com/github-actions-protobuf/
      - name: Cache protobuf library
        id: cache-protobuf
        uses: actions/cache@v3.1.0-beta.3
        with:
          path: protobuf
          key: ${{ runner.os }}-protobuf
      - name: Build protobuf library and clone googleapi proto types
        if: steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          git submodule update --init --recursive
          mkdir build
          cmake -S . -B build -Dprotobuf_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release
          cmake --build ./build --parallel 20

      - name: Install protobuf library
        run: |
          git clone https://github.com/googleapis/api-common-protos.git
          cd ./protobuf/build && sudo make -j20 install
          sudo ldconfig
          protoc --version
          ls -al

      - name: Build & install for dart
        run: |
              dart pub global activate protoc_plugin

      # Generate for Dart using protobuf
      - name: Generate Dart source code
        run: |
          mkdir -p protobuf-rsd-gen/dart-src
          ls -al
          protoc --proto_path=${{github.workspace}} -I=${{github.workspace}}/api-common-protos --dart_out=protobuf-rsd-gen/dart-src rss_client.proto 

      # Upload dart artifacts
      - name: Upload generated dart artifacts
        uses: actions/upload-artifact@v3.1.1
        with:
          name: rsd-dart-gen
          path: |
            ${{github.workspace}}/protobuf-rsd-gen/dart-src
            
  package-analysis:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: axel-op/dart-package-analyzer@v3
        # set an id for the current step
        id: analysis
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # You can then use this id to retrieve the outputs in the next steps.
      # The following step shows how to exit the workflow with an error if the total score in percentage is below 50:
      - name: Check scores
        env:
          # NB: "analysis" is the id set above. Replace it with the one you used if different.
          TOTAL: ${{ steps.analysis.outputs.total }}
          TOTAL_MAX: ${{ steps.analysis.outputs.total_max }}
        run: |
          PERCENTAGE=$(( $TOTAL * 100 / $TOTAL_MAX ))
          if (( $PERCENTAGE < 50 ))
          then
            echo Score too low!
            exit 1
          fi      
